/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.Mietoru_Back.controller;

import com.example.Mietoru_Back.model.ApiAuthForgotPasswordPost200Response;
import com.example.Mietoru_Back.model.ApiAuthForgotPasswordPostRequest;
import com.example.Mietoru_Back.model.ApiAuthLoginGet200Response;
import com.example.Mietoru_Back.model.ApiAuthRegistrationPostRequest;
import com.example.Mietoru_Back.model.ApiAuthResetPasswordPost200Response;
import com.example.Mietoru_Back.model.ApiAuthResetPasswordPostRequest;
import com.example.Mietoru_Back.model.ApiAuthSetupPost200Response;
import com.example.Mietoru_Back.model.ApiAuthSetupPostRequest;
import com.example.Mietoru_Back.model.ApiBudgetActualGet200Response;
import com.example.Mietoru_Back.model.ApiDashboardGet200Response;
import com.example.Mietoru_Back.model.ApiNetAssetUpdatePut200Response;
import com.example.Mietoru_Back.model.ApiNetAssetUpdatePutRequest;
import com.example.Mietoru_Back.model.ApiProfitUpdatePut200Response;
import com.example.Mietoru_Back.model.ApiProfitUpdatePutRequest;
import com.example.Mietoru_Back.model.ApiSaleUpdatePut200Response;
import com.example.Mietoru_Back.model.ApiSaleUpdatePutRequest;
import com.example.Mietoru_Back.model.ApiSettingGet200Response;
import com.example.Mietoru_Back.model.ApiSettingUpdatePut200Response;
import com.example.Mietoru_Back.model.ApiSettingUpdatePutRequest;
import com.example.Mietoru_Back.model.ApiTaskRegistrationPost200Response;
import com.example.Mietoru_Back.model.ApiTaskRegistrationPostRequest;
import com.example.Mietoru_Back.model.ApiTaxAccountantCommentRegistrationPost200Response;
import com.example.Mietoru_Back.model.ApiTaxAccountantCommentRegistrationPostRequest;
import com.example.Mietoru_Back.model.ApiTaxAccountantGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "認証", description = "ユーザー認証関連のAPI")
public interface DefaultApi {

    /**
     * POST /api/auth/forgotPassword : パスワード再発行
     * パスワード再発行時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiAuthForgotPasswordPostRequest  (required)
     * @return パスワード再発行成功 (status code 200)
     */
    @Operation(
        operationId = "apiAuthForgotPasswordPost",
        summary = "パスワード再発行",
        description = "パスワード再発行時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "認証" },
        responses = {
            @ApiResponse(responseCode = "200", description = "パスワード再発行成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiAuthForgotPasswordPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/forgotPassword",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiAuthForgotPasswordPost200Response> apiAuthForgotPasswordPost(
        @Parameter(name = "ApiAuthForgotPasswordPostRequest", description = "", required = true) @Valid @RequestBody ApiAuthForgotPasswordPostRequest apiAuthForgotPasswordPostRequest
    );


    /**
     * GET /api/auth/login : ユーザーログイン
     * ユーザーログイン時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param email メールアドレス (required)
     * @param passwordHash パスワードハッシュ（ローカルログイン時のみ） (optional)
     * @param googleId Google ID（Google SSOログイン時のみ） (optional)
     * @return ログイン成功 (status code 200)
     *         or 認証失敗 (status code 401)
     */
    @Operation(
        operationId = "apiAuthLoginGet",
        summary = "ユーザーログイン",
        description = "ユーザーログイン時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "認証" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ログイン成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiAuthLoginGet200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "認証失敗")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/auth/login",
        produces = "application/json"
    )
    
    ResponseEntity<ApiAuthLoginGet200Response> apiAuthLoginGet(
        @NotNull @jakarta.validation.constraints.Email @Parameter(name = "email", description = "メールアドレス", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email,
        @Parameter(name = "passwordHash", description = "パスワードハッシュ（ローカルログイン時のみ）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "passwordHash", required = false) String passwordHash,
        @Parameter(name = "googleId", description = "Google ID（Google SSOログイン時のみ）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "googleId", required = false) String googleId
    );


    /**
     * POST /api/auth/registration : ユーザー登録
     * ユーザー登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiAuthRegistrationPostRequest  (required)
     * @return 登録成功 (status code 200)
     */
    @Operation(
        operationId = "apiAuthRegistrationPost",
        summary = "ユーザー登録",
        description = "ユーザー登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "認証" },
        responses = {
            @ApiResponse(responseCode = "200", description = "登録成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiAuthLoginGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/registration",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiAuthLoginGet200Response> apiAuthRegistrationPost(
        @Parameter(name = "ApiAuthRegistrationPostRequest", description = "", required = true) @Valid @RequestBody ApiAuthRegistrationPostRequest apiAuthRegistrationPostRequest
    );


    /**
     * POST /api/auth/resetPassword : パスワード再設定
     * パスワード再設定時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiAuthResetPasswordPostRequest  (required)
     * @return 再設定成功 (status code 200)
     */
    @Operation(
        operationId = "apiAuthResetPasswordPost",
        summary = "パスワード再設定",
        description = "パスワード再設定時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "認証" },
        responses = {
            @ApiResponse(responseCode = "200", description = "再設定成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiAuthResetPasswordPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/resetPassword",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiAuthResetPasswordPost200Response> apiAuthResetPasswordPost(
        @Parameter(name = "ApiAuthResetPasswordPostRequest", description = "", required = true) @Valid @RequestBody ApiAuthResetPasswordPostRequest apiAuthResetPasswordPostRequest
    );


    /**
     * POST /api/auth/setup : 初期設定
     * 初期設定登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiAuthSetupPostRequest  (required)
     * @return 設定成功 (status code 200)
     */
    @Operation(
        operationId = "apiAuthSetupPost",
        summary = "初期設定",
        description = "初期設定登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "認証" },
        responses = {
            @ApiResponse(responseCode = "200", description = "設定成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiAuthSetupPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/setup",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiAuthSetupPost200Response> apiAuthSetupPost(
        @Parameter(name = "ApiAuthSetupPostRequest", description = "", required = true) @Valid @RequestBody ApiAuthSetupPostRequest apiAuthSetupPostRequest
    );


    /**
     * GET /api/budgetActual : 予実管理画面初期表示
     * 予実管理画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param userId ユーザーID（UUID） (required)
     * @return 取得成功 (status code 200)
     */
    @Operation(
        operationId = "apiBudgetActualGet",
        summary = "予実管理画面初期表示",
        description = "予実管理画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "画面表示" },
        responses = {
            @ApiResponse(responseCode = "200", description = "取得成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiBudgetActualGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/budgetActual",
        produces = "application/json"
    )
    
    ResponseEntity<ApiBudgetActualGet200Response> apiBudgetActualGet(
        @NotNull @Parameter(name = "userId", description = "ユーザーID（UUID）", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    );


    /**
     * GET /api/dashboard : ダッシュボード画面初期表示
     * ダッシュボード画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param userId ユーザーID（UUID） (required)
     * @return 取得成功 (status code 200)
     */
    @Operation(
        operationId = "apiDashboardGet",
        summary = "ダッシュボード画面初期表示",
        description = "ダッシュボード画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "画面表示" },
        responses = {
            @ApiResponse(responseCode = "200", description = "取得成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiDashboardGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/dashboard",
        produces = "application/json"
    )
    
    ResponseEntity<ApiDashboardGet200Response> apiDashboardGet(
        @NotNull @Parameter(name = "userId", description = "ユーザーID（UUID）", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    );


    /**
     * PUT /api/netAsset/update : 純利益更新
     * 純利益更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiNetAssetUpdatePutRequest  (required)
     * @return 更新成功 (status code 200)
     */
    @Operation(
        operationId = "apiNetAssetUpdatePut",
        summary = "純利益更新",
        description = "純利益更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "純利益" },
        responses = {
            @ApiResponse(responseCode = "200", description = "更新成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNetAssetUpdatePut200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/netAsset/update",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiNetAssetUpdatePut200Response> apiNetAssetUpdatePut(
        @Parameter(name = "ApiNetAssetUpdatePutRequest", description = "", required = true) @Valid @RequestBody ApiNetAssetUpdatePutRequest apiNetAssetUpdatePutRequest
    );


    /**
     * PUT /api/profit/update : 利益更新
     * 利益更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiProfitUpdatePutRequest  (required)
     * @return 更新成功 (status code 200)
     */
    @Operation(
        operationId = "apiProfitUpdatePut",
        summary = "利益更新",
        description = "利益更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "利益" },
        responses = {
            @ApiResponse(responseCode = "200", description = "更新成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiProfitUpdatePut200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/profit/update",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiProfitUpdatePut200Response> apiProfitUpdatePut(
        @Parameter(name = "ApiProfitUpdatePutRequest", description = "", required = true) @Valid @RequestBody ApiProfitUpdatePutRequest apiProfitUpdatePutRequest
    );


    /**
     * GET /api/roadmap : ロードマップ設定画面初期表示
     * ロードマップ設定画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param userId ユーザーID（UUID） (required)
     * @return 取得成功 (status code 200)
     */
    @Operation(
        operationId = "apiRoadmapGet",
        summary = "ロードマップ設定画面初期表示",
        description = "ロードマップ設定画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "画面表示" },
        responses = {
            @ApiResponse(responseCode = "200", description = "取得成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiBudgetActualGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/roadmap",
        produces = "application/json"
    )
    
    ResponseEntity<ApiBudgetActualGet200Response> apiRoadmapGet(
        @NotNull @Parameter(name = "userId", description = "ユーザーID（UUID）", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    );


    /**
     * PUT /api/sale/update : 売上更新
     * 売上更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiSaleUpdatePutRequest  (required)
     * @return 更新成功 (status code 200)
     */
    @Operation(
        operationId = "apiSaleUpdatePut",
        summary = "売上更新",
        description = "売上更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "売上" },
        responses = {
            @ApiResponse(responseCode = "200", description = "更新成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiSaleUpdatePut200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/sale/update",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiSaleUpdatePut200Response> apiSaleUpdatePut(
        @Parameter(name = "ApiSaleUpdatePutRequest", description = "", required = true) @Valid @RequestBody ApiSaleUpdatePutRequest apiSaleUpdatePutRequest
    );


    /**
     * GET /api/setting : 設定画面初期表示
     * 設定画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param userId ユーザーID（UUID） (required)
     * @return 取得成功 (status code 200)
     */
    @Operation(
        operationId = "apiSettingGet",
        summary = "設定画面初期表示",
        description = "設定画面初期表示時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "画面表示" },
        responses = {
            @ApiResponse(responseCode = "200", description = "取得成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiSettingGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/setting",
        produces = "application/json"
    )
    
    ResponseEntity<ApiSettingGet200Response> apiSettingGet(
        @NotNull @Parameter(name = "userId", description = "ユーザーID（UUID）", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) String userId
    );


    /**
     * PUT /api/setting/update : 設定内容変更
     * 設定内容更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiSettingUpdatePutRequest  (required)
     * @return 更新成功 (status code 200)
     */
    @Operation(
        operationId = "apiSettingUpdatePut",
        summary = "設定内容変更",
        description = "設定内容更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "設定" },
        responses = {
            @ApiResponse(responseCode = "200", description = "更新成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiSettingUpdatePut200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/setting/update",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiSettingUpdatePut200Response> apiSettingUpdatePut(
        @Parameter(name = "ApiSettingUpdatePutRequest", description = "", required = true) @Valid @RequestBody ApiSettingUpdatePutRequest apiSettingUpdatePutRequest
    );


    /**
     * DELETE /api/task/delete : タスク削除
     * タスク削除時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param taskId タスクID（UUID） (required)
     * @return 削除成功 (status code 200)
     */
    @Operation(
        operationId = "apiTaskDeleteDelete",
        summary = "タスク削除",
        description = "タスク削除時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "タスク" },
        responses = {
            @ApiResponse(responseCode = "200", description = "削除成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiAuthSetupPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/task/delete",
        produces = "application/json"
    )
    
    ResponseEntity<ApiAuthSetupPost200Response> apiTaskDeleteDelete(
        @NotNull @Parameter(name = "taskId", description = "タスクID（UUID）", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = true) String taskId
    );


    /**
     * POST /api/task/registration : タスク登録
     * タスク登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiTaskRegistrationPostRequest  (required)
     * @return 登録成功 (status code 200)
     */
    @Operation(
        operationId = "apiTaskRegistrationPost",
        summary = "タスク登録",
        description = "タスク登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "タスク" },
        responses = {
            @ApiResponse(responseCode = "200", description = "登録成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiTaskRegistrationPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/task/registration",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiTaskRegistrationPost200Response> apiTaskRegistrationPost(
        @Parameter(name = "ApiTaskRegistrationPostRequest", description = "", required = true) @Valid @RequestBody ApiTaskRegistrationPostRequest apiTaskRegistrationPostRequest
    );


    /**
     * PUT /api/task/update : タスク更新
     * タスク更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiTaskRegistrationPostRequest  (required)
     * @return 更新成功 (status code 200)
     */
    @Operation(
        operationId = "apiTaskUpdatePut",
        summary = "タスク更新",
        description = "タスク更新時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "タスク" },
        responses = {
            @ApiResponse(responseCode = "200", description = "更新成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiTaskRegistrationPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/task/update",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiTaskRegistrationPost200Response> apiTaskUpdatePut(
        @Parameter(name = "ApiTaskRegistrationPostRequest", description = "", required = true) @Valid @RequestBody ApiTaskRegistrationPostRequest apiTaskRegistrationPostRequest
    );


    /**
     * POST /api/taxAccountantComment/registration : 税理士コメント登録
     * 税理士コメント登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @param apiTaxAccountantCommentRegistrationPostRequest  (required)
     * @return 登録成功 (status code 200)
     */
    @Operation(
        operationId = "apiTaxAccountantCommentRegistrationPost",
        summary = "税理士コメント登録",
        description = "税理士コメント登録時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "税理士コメント" },
        responses = {
            @ApiResponse(responseCode = "200", description = "登録成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiTaxAccountantCommentRegistrationPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/taxAccountantComment/registration",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ApiTaxAccountantCommentRegistrationPost200Response> apiTaxAccountantCommentRegistrationPost(
        @Parameter(name = "ApiTaxAccountantCommentRegistrationPostRequest", description = "", required = true) @Valid @RequestBody ApiTaxAccountantCommentRegistrationPostRequest apiTaxAccountantCommentRegistrationPostRequest
    );


    /**
     * GET /api/taxAccountant : クライアント管理画面初期表示
     * クライアント管理画面初期設定時使用。responseStatusは成功時に1を返却、失敗時は0を返却
     *
     * @return 取得成功 (status code 200)
     */
    @Operation(
        operationId = "apiTaxAccountantGet",
        summary = "クライアント管理画面初期表示",
        description = "クライアント管理画面初期設定時使用。responseStatusは成功時に1を返却、失敗時は0を返却",
        tags = { "画面表示" },
        responses = {
            @ApiResponse(responseCode = "200", description = "取得成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiTaxAccountantGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/taxAccountant",
        produces = "application/json"
    )
    
    ResponseEntity<ApiTaxAccountantGet200Response> apiTaxAccountantGet(
        
    );

}
